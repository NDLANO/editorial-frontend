/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/contexts": {
    /** Gets all contexts */
    get: operations["get_22"];
    /**
     * Adds a new context 
     * @description All subjects are already contexts and may not be added again. Only topics may be added as a context. The topic must exist already.
     */
    post: operations["post_17"];
  };
  "/v1/contexts/{id}": {
    /**
     * Removes a context 
     * @description Does not remove the underlying resource, only marks it as not being a context
     */
    delete: operations["delete_23"];
  };
  "/v1/filters": {
    /**
     * Gets all filters 
     * @deprecated
     */
    get: operations["index_17"];
    /**
     * Creates a new filter 
     * @deprecated
     */
    post: operations["post_16"];
  };
  "/v1/filters/{id}": {
    /**
     * Gets a single filter 
     * @deprecated 
     * @description Default language will be returned if desired language not found or if parameter is omitted.
     */
    get: operations["get_20"];
    /**
     * Updates a filter 
     * @deprecated
     */
    put: operations["put_19"];
    /**
     * Delete a single filter by ID 
     * @deprecated
     */
    delete: operations["delete_21"];
  };
  "/v1/filters/{id}/translations": {
    /**
     * Gets all relevanceTranslations for a single filter 
     * @deprecated
     */
    get: operations["index_18"];
  };
  "/v1/filters/{id}/translations/{language}": {
    /**
     * Gets a single translation for a single filter 
     * @deprecated
     */
    get: operations["get_21"];
    /**
     * Creates or updates a translation of a filter 
     * @deprecated
     */
    put: operations["put_20"];
    /**
     * Deletes a translation 
     * @deprecated
     */
    delete: operations["delete_22"];
  };
  "/v1/node-connections": {
    /** Gets all connections between node and children */
    get: operations["index_16"];
    /** Adds a node to a parent */
    post: operations["post_15"];
  };
  "/v1/node-connections/page": {
    /** Gets all connections between node and children paginated */
    get: operations["allPaginated_8"];
  };
  "/v1/node-connections/{id}": {
    /** Gets a single connection between a node and a child */
    get: operations["get_19"];
    /**
     * Updates a connection between a node and a child 
     * @description Use to update which node is primary to a child or to alter sorting order
     */
    put: operations["put_18"];
    /** Removes a connection between a node and a child */
    delete: operations["delete_20"];
  };
  "/v1/node-connections/{id}/metadata": {
    /** Gets metadata for entity */
    get: operations["getMetadata_5"];
    /** Updates metadata for entity */
    put: operations["putMetadata_5"];
  };
  "/v1/node-resources": {
    /** Gets all connections between node and resources */
    get: operations["index_15"];
    /** Adds a resource to a node */
    post: operations["post_14"];
  };
  "/v1/node-resources/page": {
    /** Gets all connections between node and resources paginated */
    get: operations["allPaginated_7"];
  };
  "/v1/node-resources/{id}": {
    /** Gets a specific connection between a node and a resource */
    get: operations["get_18"];
    /**
     * Updates a connection between a node and a resource 
     * @description Use to update which node is primary to the resource or to change sorting order.
     */
    put: operations["put_17"];
    /** Removes a resource from a node */
    delete: operations["delete_19"];
  };
  "/v1/node-resources/{id}/metadata": {
    /** Gets metadata for entity */
    get: operations["getMetadata_4"];
    /** Updates metadata for entity */
    put: operations["putMetadata_4"];
  };
  "/v1/nodes": {
    /** Gets all nodes */
    get: operations["getAll_3"];
    /** Creates a new node */
    post: operations["post_13"];
  };
  "/v1/nodes/page": {
    /** Gets all nodes paginated */
    get: operations["allPaginated_6"];
  };
  "/v1/nodes/search": {
    /** Search all nodes */
    get: operations["search_3"];
  };
  "/v1/nodes/{id}": {
    /** Gets a single node */
    get: operations["get_16"];
    /** Updates a single node */
    put: operations["put_15"];
    /** Deletes a single node by id */
    delete: operations["delete_17"];
  };
  "/v1/nodes/{id}/connections": {
    /** Gets all parents and children this node is connected to */
    get: operations["getAllConnections_1"];
  };
  "/v1/nodes/{id}/makeResourcesPrimary": {
    /** Makes all connected resources primary */
    put: operations["makeResourcesPrimary_1"];
  };
  "/v1/nodes/{id}/metadata": {
    /** Gets metadata for entity */
    get: operations["getMetadata_3"];
    /** Updates metadata for entity */
    put: operations["putMetadata_3"];
  };
  "/v1/nodes/{id}/nodes": {
    /** Gets all children for this node */
    get: operations["getChildren_1"];
  };
  "/v1/nodes/{id}/publish": {
    /** Publishes a node hierarchy to a version */
    put: operations["publishAsync"];
  };
  "/v1/nodes/{id}/resources": {
    /** Gets all resources for the given node */
    get: operations["getResources_2"];
  };
  "/v1/nodes/{id}/translations": {
    /** Gets all translations for a single node */
    get: operations["index_14"];
  };
  "/v1/nodes/{id}/translations/{language}": {
    /** Gets a single translation for a single node */
    get: operations["get_17"];
    /** Creates or updates a translation of a node */
    put: operations["put_16"];
    /** Deletes a translation */
    delete: operations["delete_18"];
  };
  "/v1/queries/path": {
    /** Gets a list of contexts matching given pretty url with contextId, empty list if no matches are found. */
    get: operations["queryByPath"];
  };
  "/v1/queries/resources": {
    /** Gets a list of resources matching given contentURI, empty list of no matches are found. DEPRECATED: Use /v1/resources?contentURI= instead */
    get: operations["queryResources"];
  };
  "/v1/queries/topics": {
    /** Gets a list of topics matching given contentURI, empty list of no matches are found. DEPRECATED: Use /v1/topics?contentURI= instead */
    get: operations["queryTopics"];
  };
  "/v1/queries/{contentURI}": {
    /** Gets a list of contexts matching given contentURI, empty list if no matches are found. */
    get: operations["queryFullNode"];
  };
  "/v1/relevances": {
    /** Gets all relevances */
    get: operations["index_13"];
    /** Creates a new relevance */
    post: operations["post_12"];
  };
  "/v1/relevances/{id}": {
    /**
     * Gets a single relevance 
     * @description Default language will be returned if desired language not found or if parameter is omitted.
     */
    get: operations["get_15"];
    /** Updates a relevance */
    put: operations["put_14"];
    /** Deletes a single entity by id */
    delete: operations["delete_16"];
  };
  "/v1/resource-filters": {
    /**
     * Gets all connections between resources and filters 
     * @deprecated
     */
    get: operations["index_12"];
    /**
     * Adds a filter to a resource 
     * @deprecated
     */
    post: operations["post_11"];
  };
  "/v1/resource-filters/{id}": {
    /** @deprecated */
    get: operations["get_14"];
    /**
     * Updates a resource filter connection 
     * @deprecated
     */
    put: operations["put_13"];
    /**
     * Deletes a resource filter connection 
     * @deprecated
     */
    delete: operations["delete_15"];
  };
  "/v1/resource-resourcetypes": {
    /** Gets all connections between resources and resource types */
    get: operations["index_11"];
    /** Adds a resource type to a resource */
    post: operations["post_10"];
  };
  "/v1/resource-resourcetypes/{id}": {
    /** Gets a single connection between resource and resource type */
    get: operations["get_13"];
    /** Removes a resource type from a resource */
    delete: operations["delete_14"];
  };
  "/v1/resource-types": {
    /** Gets a list of all resource types */
    get: operations["index_9"];
    /** Adds a new resource type */
    post: operations["post_9"];
  };
  "/v1/resource-types/{id}": {
    /** Gets a single resource type */
    get: operations["get_11"];
    /** Updates a resource type. Use to update which resource type is parent. You can also update the id, take care! */
    put: operations["put_11"];
    /** Deletes a single entity by id */
    delete: operations["delete_12"];
  };
  "/v1/resource-types/{id}/subtypes": {
    /** Gets subtypes of one resource type */
    get: operations["getSubtypes"];
  };
  "/v1/resource-types/{id}/translations": {
    /** Gets all relevanceTranslations for a single resource type */
    get: operations["index_10"];
  };
  "/v1/resource-types/{id}/translations/{language}": {
    /** Gets a single translation for a single resource type */
    get: operations["get_12"];
    /** Creates or updates a translation of a resource type */
    put: operations["put_12"];
    /** Deletes a translation */
    delete: operations["delete_13"];
  };
  "/v1/resources": {
    /** Lists all resources */
    get: operations["getAll_2"];
    /** Adds a new resource */
    post: operations["post_8"];
  };
  "/v1/resources/page": {
    /** Gets all resources paginated */
    get: operations["allPaginated_5"];
  };
  "/v1/resources/search": {
    /** Search all resources */
    get: operations["search_2"];
  };
  "/v1/resources/{id}": {
    /** Gets a single resource */
    get: operations["get_9"];
    /** Updates a resource */
    put: operations["put_9"];
    /** Deletes a single entity by id */
    delete: operations["delete_10"];
  };
  "/v1/resources/{id}/clone": {
    /** Clones a resource, including resource-types and translations */
    post: operations["clone"];
  };
  "/v1/resources/{id}/full": {
    /** Gets all parent topics, all filters and resourceTypes for this resource */
    get: operations["getResourceFull"];
  };
  "/v1/resources/{id}/metadata": {
    /** Gets metadata for entity */
    get: operations["getMetadata_2"];
    /** Updates metadata for entity */
    put: operations["putMetadata_2"];
  };
  "/v1/resources/{id}/resource-types": {
    /** Gets all resource types associated with this resource */
    get: operations["getResourceTypes_1"];
  };
  "/v1/resources/{id}/translations": {
    /** Gets all relevanceTranslations for a single resource */
    get: operations["index_8"];
  };
  "/v1/resources/{id}/translations/{language}": {
    /** Gets a single translation for a single resource */
    get: operations["get_10"];
    /** Creates or updates a translation of a resource */
    put: operations["put_10"];
    /** Deletes a translation */
    delete: operations["delete_11"];
  };
  "/v1/resources/{resourceId}/filters": {
    /**
     * Gets all filters associated with this resource 
     * @deprecated
     */
    get: operations["getFiltersByResourceId"];
  };
  "/v1/subject-topics": {
    /** Gets all connections between subjects and topics */
    get: operations["index_7"];
    /** Adds a new topic to a subject */
    post: operations["post_7"];
  };
  "/v1/subject-topics/page": {
    /** Gets all connections between subjects and topics paginated */
    get: operations["allPaginated_4"];
  };
  "/v1/subject-topics/{id}": {
    /** Get a specific connection between a subject and a topic */
    get: operations["get_8"];
    /**
     * Updates a connection between subject and topic 
     * @description Use to update which subject is primary to a topic or to change sorting order.
     */
    put: operations["put_8"];
    /** Removes a topic from a subject */
    delete: operations["delete_9"];
  };
  "/v1/subjects": {
    /** Gets all subjects */
    get: operations["index_5"];
    /** Creates a new subject */
    post: operations["post_6"];
  };
  "/v1/subjects/page": {
    /** Gets all connections between node and children paginated */
    get: operations["allPaginated_3"];
  };
  "/v1/subjects/search": {
    /** Search all subjects */
    get: operations["search_1"];
  };
  "/v1/subjects/{id}": {
    /**
     * Gets a single subject 
     * @description Default language will be returned if desired language not found or if parameter is omitted.
     */
    get: operations["get_6"];
    /** Updates a subject */
    put: operations["put_6"];
    /** Deletes a single entity by id */
    delete: operations["delete_7"];
  };
  "/v1/subjects/{id}/metadata": {
    /** Gets metadata for entity */
    get: operations["getMetadata_1"];
    /** Updates metadata for entity */
    put: operations["putMetadata_1"];
  };
  "/v1/subjects/{id}/topics": {
    /**
     * Gets all children associated with a subject 
     * @description This resource is read-only. To update the relationship between nodes, use the resource /subject-topics.
     */
    get: operations["getChildren"];
  };
  "/v1/subjects/{id}/translations": {
    /** Gets all relevanceTranslations for a single subject */
    get: operations["index_6"];
  };
  "/v1/subjects/{id}/translations/{language}": {
    /** Gets a single translation for a single subject */
    get: operations["get_7"];
    /** Creates or updates a translation of a subject */
    put: operations["put_7"];
    /** Deletes a translation */
    delete: operations["delete_8"];
  };
  "/v1/subjects/{subjectId}/filters": {
    /**
     * Gets all filters for a subject 
     * @deprecated
     */
    get: operations["getFiltersBySubjectId"];
  };
  "/v1/subjects/{subjectId}/resources": {
    /** Gets all resources for a subject. Searches recursively in all children of this node.The ordering of resources will be based on the rank of resources relative to the node they belong to. */
    get: operations["getResources_1"];
  };
  "/v1/topic-filters": {
    /**
     * Gets all connections between topics and filters 
     * @deprecated
     */
    get: operations["index_4"];
    /**
     * Adds a filter to a topic 
     * @deprecated
     */
    post: operations["post_5"];
  };
  "/v1/topic-filters/{id}": {
    /**
     * Updates a topic filter connection 
     * @deprecated
     */
    put: operations["put_5"];
    /**
     * Deletes a connection between a topic and a filter 
     * @deprecated
     */
    delete: operations["delete_6"];
  };
  "/v1/topic-resources": {
    /** Gets all connections between topics and resources */
    get: operations["index_3"];
    /** Adds a resource to a topic */
    post: operations["post_4"];
  };
  "/v1/topic-resources/page": {
    /** Gets all connections between topic and resources paginated */
    get: operations["allPaginated_2"];
  };
  "/v1/topic-resources/{id}": {
    /** Gets a specific connection between a topic and a resource */
    get: operations["get_5"];
    /**
     * Updates a connection between a topic and a resource 
     * @description Use to update which topic is primary to the resource or to change sorting order.
     */
    put: operations["put_4"];
    /** Removes a resource from a topic */
    delete: operations["delete_5"];
  };
  "/v1/topic-resourcetypes": {
    /**
     * Gets all connections between topics and resource types 
     * @deprecated
     */
    get: operations["index_2"];
    /**
     * Adds a resource type to a topic 
     * @deprecated
     */
    post: operations["post_3"];
  };
  "/v1/topic-resourcetypes/{id}": {
    /**
     * Gets a single connection between topic and resource type 
     * @deprecated
     */
    get: operations["get_4"];
    /**
     * Removes a resource type from a topic 
     * @deprecated
     */
    delete: operations["delete_4"];
  };
  "/v1/topic-subtopics": {
    /** Gets all connections between topics and subtopics */
    get: operations["index_1"];
    /** Adds a subtopic to a topic */
    post: operations["post_2"];
  };
  "/v1/topic-subtopics/page": {
    /** Gets all connections between topics and subtopics paginated */
    get: operations["allPaginated_1"];
  };
  "/v1/topic-subtopics/{id}": {
    /** Gets a single connection between a topic and a subtopic */
    get: operations["get_3"];
    /**
     * Updates a connection between a topic and a subtopic 
     * @description Use to update which topic is primary to a subtopic or to alter sorting order
     */
    put: operations["put_3"];
    /** Removes a connection between a topic and a subtopic */
    delete: operations["delete_3"];
  };
  "/v1/topics": {
    /** Gets all topics */
    get: operations["getAll_1"];
    /** Creates a new topic */
    post: operations["post_1"];
  };
  "/v1/topics/page": {
    /** Gets all topics paginated */
    get: operations["allPaginated"];
  };
  "/v1/topics/search": {
    /** Search all topics */
    get: operations["search"];
  };
  "/v1/topics/{id}": {
    /** Gets a single topic */
    get: operations["get_1"];
    /** Updates a single topic */
    put: operations["put_1"];
    /** @description Deletes a single entity by id */
    delete: operations["delete_1"];
  };
  "/v1/topics/{id}/connections": {
    /** Gets all subjects and subtopics this topic is connected to */
    get: operations["getAllConnections"];
  };
  "/v1/topics/{id}/filters": {
    /**
     * Gets all filters associated with this topic 
     * @deprecated
     */
    get: operations["getFilters"];
  };
  "/v1/topics/{id}/makeResourcesPrimary": {
    /** Makes all connected resources primary */
    put: operations["makeResourcesPrimary"];
  };
  "/v1/topics/{id}/metadata": {
    /** Gets metadata for entity */
    get: operations["getMetadata"];
    /** Updates metadata for entity */
    put: operations["putMetadata"];
  };
  "/v1/topics/{id}/resource-types": {
    /**
     * Gets all resource types associated with this topic. No longer needed since o topics in database have resource-type 
     * @deprecated
     */
    get: operations["getResourceTypes"];
  };
  "/v1/topics/{id}/resources": {
    /** Gets all resources for the given topic */
    get: operations["getResources"];
  };
  "/v1/topics/{id}/topics": {
    /** Gets all subtopics for this topic */
    get: operations["getSubTopics"];
  };
  "/v1/topics/{id}/translations": {
    /** Gets all relevanceTranslations for a single topic */
    get: operations["index"];
  };
  "/v1/topics/{id}/translations/{language}": {
    /** Gets a single translation for a single topic */
    get: operations["get_2"];
    /** Creates or updates a translation of a topic */
    put: operations["put_2"];
    /** Deletes a translation */
    delete: operations["delete_2"];
  };
  "/v1/url/mapping": {
    /** Returns path for an url or HTTP 404 */
    get: operations["getTaxonomyPathForUrl"];
    /** Inserts or updates a mapping from url to nodeId and optionally subjectId */
    put: operations["putTaxonomyNodeAndSubjectForOldUrl"];
  };
  "/v1/url/resolve": {
    get: operations["resolve"];
  };
  "/v1/versions": {
    /** Gets all versions */
    get: operations["getAll"];
    /** Creates a new version */
    post: operations["post"];
  };
  "/v1/versions/{id}": {
    /** Gets a single version */
    get: operations["get"];
    /** Updates a version */
    put: operations["put"];
    /** Deletes a version by publicId */
    delete: operations["delete"];
  };
  "/v1/versions/{id}/publish": {
    /** Publishes a version */
    put: operations["publish"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description The new connection */
    AddChildToParentCommand: {
      /**
       * Format: uri 
       * @description Child id 
       * @example urn:topic:234
       */
      childId: string;
      /**
       * Parent id 
       * Format: uri 
       * @example urn:topic:234
       */
      parentId: string;
      /**
       * @description Backwards compatibility: Always true. Ignored on insert/update 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which to sort the child for the parent 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
    };
    /** @description The new resource filter */
    AddFilterToResourceCommand: {
      /**
       * Format: uri 
       * @description Filter id 
       * @example urn:filter:234
       */
      filterId: string;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId: string;
      /**
       * Format: uri 
       * @description Resource id 
       * @example urn:resource:123
       */
      resourceId: string;
    };
    /** @description The new topic filter */
    AddFilterToTopicCommand: {
      /**
       * Format: uri 
       * @description Filter id 
       * @example urn:filter:234
       */
      filterId: string;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId: string;
      /**
       * Format: uri 
       * @description Topic id 
       * @example urn:topic:123
       */
      topicId: string;
    };
    /** @description new node/resource connection */
    AddResourceToNodeCommand: {
      /**
       * Format: uri 
       * @description Node id 
       * @example urn:node:345
       */
      nodeId: string;
      /**
       * @description Primary connection 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which resource is sorted for the node 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
      /**
       * Format: uri 
       * @description Resource id 
       * @example urn:resource:345
       */
      resourceId: string;
    };
    /** @description new topic/resource connection */
    AddResourceToTopicCommand: {
      /**
       * @description Primary connection 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which resource is sorted for the topic 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
      /**
       * Format: uri 
       * @description Resource id 
       * @example urn:resource:345
       */
      resourceId: string;
      /**
       * Format: uri 
       * @description Topic id 
       * @example urn:topic:345
       */
      topicid: string;
    };
    /** @description The new connection */
    AddSubtopicToTopicCommand: {
      /**
       * @description Backwards compatibility: Always true. Ignored on insert/update 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which to sort the subtopic for the topic 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
      /**
       * Format: uri 
       * @description Subtopic id 
       * @example urn:topic:234
       */
      subtopicid: string;
      /**
       * Format: uri 
       * @description Topic id 
       * @example urn:topic:234
       */
      topicid: string;
    };
    /** @description The subject and topic getting connected. */
    AddTopicToSubjectCommand: {
      /**
       * @description Backwards compatibility: Always true, ignored on insert/update. 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which the topic should be sorted for the topic 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
      /**
       * Format: uri 
       * @description Subject id 
       * @example urn:subject:123
       */
      subjectid: string;
      /**
       * Format: uri 
       * @description Topic id 
       * @example urn:topic:234
       */
      topicid: string;
    };
    Connections: {
      /**
       * Format: uri 
       * @description The id of the subject-topic or topic-subtopic connection 
       * @example urn:subject-topic:1
       */
      connectionId?: string;
      /**
       * @description True if owned by this topic, false if it has its primary connection elsewhere 
       * @example true
       */
      isPrimary?: boolean;
      /**
       * @description The path part of the url for the subject or subtopic connected to this topic 
       * @example /subject:1/topic:1
       */
      paths?: (string)[];
      primary?: boolean;
      /**
       * Format: uri 
       * @description The id of the connected subject or topic 
       * @example urn:subject:1
       */
      targetId?: string;
      /** @description The type of connection (parent subject, parent topic or subtopic */
      type?: string;
    };
    ContextIndexDocument: {
      /** Format: uri */
      id?: string;
      name?: string;
      path?: string;
    };
    /** @description the new context */
    CreateContextCommand: {
      /** Format: uri */
      id?: string;
    };
    /** @description The new resource/resource type connection */
    CreateResourceResourceTypeCommand: {
      /**
       * Format: uri 
       * @description Resource id 
       * @example urn:resource:123
       */
      resourceId: string;
      /**
       * Format: uri 
       * @description Resource type id 
       * @example urn:resourcetype:234
       */
      resourceTypeId: string;
    };
    /** @description The new resource/resource type connection */
    CreateTopicResourceTypeCommand: {
      /**
       * Format: uri 
       * @description Resource type id 
       * @example urn:resourcetype:234
       */
      resourceTypeId: string;
      /**
       * Format: uri 
       * @description Topic id 
       * @example urn:topic:123
       */
      topicId: string;
    };
    /** @description The new filter */
    FilterDTO: Record<string, never>;
    FilterTranslationIndexDocument: {
      /**
       * @description ISO 639-1 language code 
       * @example en
       */
      language?: string;
      /**
       * @description The translated name of the filter 
       * @example Carpenter
       */
      name?: string;
    };
    /** @description Name of the relevance of the connection of the base */
    LanguageFieldDTOString: {
      empty?: boolean;
      [key: string]: string | undefined;
    };
    Metadata: {
      customFields?: {
        [key: string]: string | undefined;
      };
      grepCodes?: (string)[];
      visible?: boolean;
    };
    NodeChildDTO: {
      /** @description List of names in the path */
      breadcrumbs?: (string)[];
      /**
       * Format: uri 
       * @description The id of the node connection which causes this node to be included in the result set. 
       * @example urn:node-connection:1
       */
      connectionId?: string;
      /**
       * Format: uri 
       * @description ID of content introducing this node. Must be a valid URI, but preferably not a URL. 
       * @example urn:article:1
       */
      contentUri?: string;
      /** @description An id unique for this context. */
      contextId?: string;
      /** @description A list of all contexts this node is part of */
      contexts?: (components["schemas"]["TaxonomyContextDTO"])[];
      /**
       * Format: uri 
       * @description Node id 
       * @example urn:topic:234
       */
      id?: string;
      metadata?: components["schemas"]["Metadata"];
      /**
       * @description The name of the node 
       * @example Trigonometry
       */
      name?: string;
      /**
       * @description The type of node 
       * @example resource 
       * @enum {string}
       */
      nodeType?: "NODE" | "SUBJECT" | "TOPIC" | "RESOURCE";
      /** Format: uri */
      parent?: string;
      /**
       * Format: uri 
       * @description Parent id in the current context, null if none exists
       */
      parentId?: string;
      /**
       * @description The primary path for this node 
       * @example /subject:1/topic:1
       */
      path?: string;
      /** @description List of all paths to this node */
      paths?: (string)[];
      primary?: boolean;
      /**
       * Format: int32 
       * @description The order in which to sort the node within it's level. 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
      /**
       * @description Resource type(s) 
       * @example [
       *   {
       *     "id": "urn:resourcetype:1",
       *     "name": "lecture"
       *   }
       * ]
       */
      resourceTypes?: (components["schemas"]["ResourceType"])[];
      /** @description List of language codes supported by translations */
      supportedLanguages?: (string)[];
      /** @description All translations of this node */
      translations?: (components["schemas"]["TranslationDTO"])[];
      /** @description A pretty url based on name and context. Empty if no context. */
      url?: string;
    };
    /** @description The new node */
    NodeCommand: {
      /**
       * Format: uri 
       * @description ID of content introducing this node. Must be a valid URI, but preferably not a URL. 
       * @example urn:article:1
       */
      contentUri?: string;
      /**
       * @description The name of the node. Required on create. 
       * @example Trigonometry
       */
      name?: string;
      /** @description If specified, set the node_id to this value. If omitted, an uuid will be assigned automatically. */
      nodeId?: string;
      /**
       * @description Type of node. Values are subject, topic. Required on create. 
       * @example topic 
       * @enum {string}
       */
      nodeType?: "NODE" | "SUBJECT" | "TOPIC" | "RESOURCE";
      /** @description The node is a root node. Default is false. Only used if present. */
      root?: boolean;
    };
    NodeConnectionPage: {
      /** @description Page containing results */
      results?: (components["schemas"]["ParentChildIndexDocument"])[];
      /**
       * Format: int64 
       * @description Total number of elements
       */
      totalCount?: number;
    };
    NodeDTO: {
      /** @description List of names in the path */
      breadcrumbs?: (string)[];
      /**
       * Format: uri 
       * @description ID of content introducing this node. Must be a valid URI, but preferably not a URL. 
       * @example urn:article:1
       */
      contentUri?: string;
      /** @description An id unique for this context. */
      contextId?: string;
      /** @description A list of all contexts this node is part of */
      contexts?: (components["schemas"]["TaxonomyContextDTO"])[];
      /**
       * Format: uri 
       * @description Node id 
       * @example urn:topic:234
       */
      id?: string;
      metadata?: components["schemas"]["Metadata"];
      /**
       * @description The name of the node 
       * @example Trigonometry
       */
      name?: string;
      /**
       * @description The type of node 
       * @example resource 
       * @enum {string}
       */
      nodeType?: "NODE" | "SUBJECT" | "TOPIC" | "RESOURCE";
      /**
       * @description The primary path for this node 
       * @example /subject:1/topic:1
       */
      path?: string;
      /** @description List of all paths to this node */
      paths?: (string)[];
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
      /**
       * @description Resource type(s) 
       * @example [
       *   {
       *     "id": "urn:resourcetype:1",
       *     "name": "lecture"
       *   }
       * ]
       */
      resourceTypes?: (components["schemas"]["ResourceType"])[];
      /** @description List of language codes supported by translations */
      supportedLanguages?: (string)[];
      /** @description All translations of this node */
      translations?: (components["schemas"]["TranslationDTO"])[];
      /** @description A pretty url based on name and context. Empty if no context. */
      url?: string;
    };
    NodeResourceDTO: {
      /**
       * Format: uri 
       * @description Node resource connection id 
       * @example urn:node-resource:123
       */
      id?: string;
      metadata?: components["schemas"]["Metadata"];
      /**
       * Format: uri 
       * @description Node id 
       * @example urn:node:345
       */
      nodeId?: string;
      /**
       * @description Primary connection 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which the resource is sorted for the node 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
      /**
       * Format: uri 
       * @description Resource id 
       * @example urn:resource:345
       */
      resourceId?: string;
    };
    NodeResourcePageDTO: {
      /** @description Page containing results */
      results?: (components["schemas"]["NodeResourceDTO"])[];
      /**
       * Format: int64 
       * @description Total number of elements
       */
      totalCount?: number;
    };
    ParentChildIndexDocument: {
      /**
       * Format: uri 
       * @description Child id 
       * @example urn:topic:234
       */
      childId?: string;
      /**
       * Format: uri 
       * @description Connection id 
       * @example urn:topic-has-subtopics:345
       */
      id?: string;
      metadata?: components["schemas"]["Metadata"];
      /**
       * Format: uri 
       * @description Parent id 
       * @example urn:topic:234
       */
      parentId?: string;
      /**
       * @description Backwards compatibility: Always true. Ignored on insert/update 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which subtopic is sorted for the topic 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
    };
    /** @description The new relevance */
    RelevanceCommand: {
      /**
       * Format: uri 
       * @description If specified, set the id to this value. Must start with urn:relevance: and be a valid URI. If ommitted, an id will be assigned automatically. Ignored on update 
       * @example urn:relevance:supplementary
       */
      id?: string;
      /**
       * @description The name of the relevance 
       * @example Supplementary
       */
      name: string;
    };
    RelevanceIndexDocument: {
      /**
       * Format: uri 
       * @example urn:relevance:core
       */
      id?: string;
      /**
       * @description The name of the relevance 
       * @example Core
       */
      name?: string;
      /** @description List of language codes supported by translations */
      supportedLanguages?: (string)[];
      /** @description All translations of this relevance */
      translations?: (components["schemas"]["TranslationDTO"])[];
    };
    ResolvedOldUrl: {
      /**
       * @description URL path for resource 
       * @example '/subject:1/topic:12/resource:12'
       */
      path?: string;
    };
    ResolvedUrl: {
      /**
       * Format: uri 
       * @description The ID of this element in the system where the content is stored. This ID should be of the form 'urn:<system>:<id>', where <system> is a short identifier for the system, and <id> is the id of this content in that system. 
       * @example urn:article:1
       */
      contentUri?: string;
      /**
       * Format: uri 
       * @description ID of the element referred to by the given path 
       * @example urn:resource:1
       */
      id?: string;
      /**
       * @description Element name. For performance reasons, this name is for informational purposes only. To get a translated name, please fetch the resolved resource using its rest resource. 
       * @example Basic physics
       */
      name?: string;
      /** @description Parent elements of the resolved element. The first element is the parent, the second is the grandparent, etc. */
      parents?: (string)[];
      /**
       * @description URL path for resource 
       * @example '/subject:1/topic:12/resource:12'
       */
      path?: string;
    };
    /** @description Object containing contentUri. Other values are ignored. */
    ResourceCommand: {
      /**
       * Format: uri 
       * @description The ID of this resource in the system where the content is stored. This ID should be of the form 'urn:<system>:<id>', where <system> is a short identifier for the system, and <id> is the id of this content in that system. 
       * @example urn:article:1
       */
      contentUri?: string;
      /**
       * Format: uri 
       * @description If specified, set the id to this value. Must start with urn:resource: and be a valid URI. If omitted, an id will be assigned automatically. 
       * @example urn:resource:2
       */
      id?: string;
      /**
       * @description The name of the resource 
       * @example Introduction to integration
       */
      name: string;
    };
    ResourceFilterIndexDocument: {
      /**
       * Format: uri 
       * @description Filter id 
       * @example urn:filter:234
       */
      filterId: string;
      /**
       * Format: uri 
       * @description Resource to filter connection id 
       * @example urn:resource-filter:12
       */
      id: string;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId: string;
      /**
       * Format: uri 
       * @description Resource id 
       * @example urn:resource:123
       */
      resourceId: string;
    };
    ResourceTranslationIndexDocument: {
      /**
       * @description ISO 639-1 language code 
       * @example en
       */
      language?: string;
      /**
       * @description The translated name of the resource 
       * @example Introduction to algebra
       */
      name?: string;
    };
    /**
     * @description Resource type(s) 
     * @example [
     *   {
     *     "id": "urn:resourcetype:1",
     *     "name": "lecture"
     *   }
     * ]
     */
    ResourceType: {
      /**
       * Format: uri 
       * @example urn:resourcetype:2
       */
      id?: string;
      /**
       * @description The name of the resource type 
       * @example Lecture
       */
      name?: string;
      /**
       * Format: uri 
       * @example urn:resourcetype:1
       */
      parentId?: string;
      /** @description List of language codes supported by translations */
      supportedLanguages?: (string)[];
      /** @description All translations of this resource type */
      translations?: (components["schemas"]["TranslationDTO"])[];
    };
    /** @description The new resource type */
    ResourceTypeCommand: {
      /**
       * Format: uri 
       * @description If specified, set the id to this value. Must start with urn:resourcetype: and be a valid URI. If omitted, an id will be assigned automatically. 
       * @example urn:resourcetype:1
       */
      id?: string;
      /**
       * @description The name of the resource type 
       * @example Lecture
       */
      name: string;
      /**
       * Format: uri 
       * @description If specified, the new resource type will be a child of the mentioned resource type.
       */
      parentId?: string;
    };
    ResourceTypeIndexDocument: {
      /**
       * Format: uri 
       * @description Resource to resource type connection id 
       * @example urn:resource-has-resourcetypes:12
       */
      id: string;
      /**
       * Format: uri 
       * @description Resource type id 
       * @example urn:resourcetype:234
       */
      resourceTypeId: string;
      /**
       * Format: uri 
       * @description Topic type id 
       * @example urn:topic:123
       */
      topicId: string;
    };
    ResourceTypeTranslationIndexDocument: {
      /**
       * @description ISO 639-1 language code 
       * @example en
       */
      language?: string;
      /**
       * @description The translated name of the resource type 
       * @example Article
       */
      name?: string;
    };
    ResourceTypeWithConnection: {
      /**
       * Format: uri 
       * @description The id of the resource resource type connection 
       * @example urn:resource-resourcetype:1
       */
      connectionId?: string;
      /**
       * Format: uri 
       * @example urn:resourcetype:2
       */
      id?: string;
      /**
       * @description The name of the resource type 
       * @example Lecture
       */
      name?: string;
      /**
       * Format: uri 
       * @example urn:resourcetype:1
       */
      parentId?: string;
      /** @description List of language codes supported by translations */
      supportedLanguages?: (string)[];
      /** @description All translations of this resource type */
      translations?: (components["schemas"]["TranslationDTO"])[];
    };
    ResourceWithParents: {
      /** @description List of names in the path */
      breadcrumbs?: (string)[];
      /**
       * Format: uri 
       * @description ID of content introducing this node. Must be a valid URI, but preferably not a URL. 
       * @example urn:article:1
       */
      contentUri?: string;
      /** @description An id unique for this context. */
      contextId?: string;
      /** @description A list of all contexts this node is part of */
      contexts?: (components["schemas"]["TaxonomyContextDTO"])[];
      /**
       * Format: uri 
       * @description Node id 
       * @example urn:topic:234
       */
      id?: string;
      metadata?: components["schemas"]["Metadata"];
      /**
       * @description The name of the node 
       * @example Trigonometry
       */
      name?: string;
      /**
       * @description The type of node 
       * @example resource 
       * @enum {string}
       */
      nodeType?: "NODE" | "SUBJECT" | "TOPIC" | "RESOURCE";
      /**
       * @description Parent topology nodes and whether or not connection type is primary 
       * @example [
       *   {
       *     "contentUri": "urn:article:6662",
       *     "id": "urn:topic:1:181900",
       *     "name": "I dyrehagen",
       *     "path": "/subject:2/topic:1:181900",
       *     "primary": "true"
       *   }
       * ]
       */
      parents?: (components["schemas"]["NodeChildDTO"])[];
      /**
       * @description The primary path for this node 
       * @example /subject:1/topic:1
       */
      path?: string;
      /** @description List of all paths to this node */
      paths?: (string)[];
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
      /**
       * @description Resource type(s) 
       * @example [
       *   {
       *     "id": "urn:resourcetype:1",
       *     "name": "lecture"
       *   }
       * ]
       */
      resourceTypes?: (components["schemas"]["ResourceType"])[];
      /** @description List of language codes supported by translations */
      supportedLanguages?: (string)[];
      /** @description All translations of this node */
      translations?: (components["schemas"]["TranslationDTO"])[];
      /** @description A pretty url based on name and context. Empty if no context. */
      url?: string;
    };
    SearchResult: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      pageSize?: number;
      /** @example List of search results */
      results?: (components["schemas"]["NodeDTO"])[];
      /** Format: int64 */
      totalCount?: number;
    };
    /** @description Resource-types of the base */
    SearchableTaxonomyResourceType: {
      id?: string;
      name?: {
        [key: string]: string | undefined;
      };
    };
    /** @description The new subject */
    SubjectCommand: {
      /**
       * Format: uri 
       * @description ID of article introducing this subject. Must be a valid URI, but preferably not a URL. 
       * @example urn:article:1
       */
      contentUri?: string;
      /**
       * Format: uri 
       * @description If specified, set the id to this value. Must start with urn:subject: and be a valid URI. If ommitted, an id will be assigned automatically. 
       * @example urn:subject:1
       */
      id?: string;
      /**
       * @description The name of the subject 
       * @example Mathematics
       */
      name: string;
    };
    SubjectTopicIndexDocument: {
      /**
       * Format: uri 
       * @description Connection id 
       * @example urn:subject-has-topics:34
       */
      id?: string;
      /**
       * @description primary 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which the topic is sorted under the subject 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
      /**
       * Format: uri 
       * @description Subject id 
       * @example urn:subject:123
       */
      subjectid?: string;
      /**
       * Format: uri 
       * @description Topic id 
       * @example urn:topic:345
       */
      topicid?: string;
    };
    SubjectTopicPage: {
      /** @description Page containing results */
      results?: (components["schemas"]["SubjectTopicIndexDocument"])[];
      /**
       * Format: int64 
       * @description Total number of elements
       */
      totalCount?: number;
    };
    SubjectTranslationIndexDocument: {
      /**
       * @description ISO 639-1 language code 
       * @example en
       */
      language?: string;
      /**
       * @description The translated name of the subject 
       * @example Mathematics
       */
      name?: string;
    };
    /** @description A list of all contexts this node is part of */
    TaxonomyContextDTO: {
      /** @description A breadcrumb of the names of the context's path */
      breadcrumbs?: {
        empty?: boolean;
        [key: string]: (string)[] | undefined;
      };
      /** @description Unique id of context based on root + connection */
      contextId?: string;
      /** @description Whether a 'standard'-article, 'topic-article'-article or a 'learningpath' */
      contextType?: string;
      /** Format: uri */
      id?: string;
      /** @description Whether the base connection is primary or not */
      isPrimary?: boolean;
      isPrimaryConnection?: boolean;
      /** @description Whether the base connection is visible or not */
      isVisible?: boolean;
      /** @description List of all parent topic-ids */
      parentIds?: (string)[];
      parentTopicIds?: readonly (string)[];
      /** @description The context path */
      path?: string;
      /**
       * Format: uri 
       * @description The publicId of the node connected via content-uri
       */
      publicId?: string;
      /** @description Name of the relevance of the connection of the base */
      relevance?: {
        empty?: boolean;
        [key: string]: string | undefined;
      };
      /**
       * Format: uri 
       * @description Id of the relevance of the connection of the base
       */
      relevanceId?: string;
      /** @description Resource-types of the base */
      resourceTypes?: (components["schemas"]["SearchableTaxonomyResourceType"])[];
      root?: components["schemas"]["LanguageFieldDTOString"];
      /**
       * Format: uri 
       * @description The publicId of the root parent of the context
       */
      rootId?: string;
      subject?: components["schemas"]["LanguageFieldDTOString"];
      /** Format: uri */
      subjectId?: string;
    };
    /** @description The new topic */
    TopicCommand: {
      /**
       * Format: uri 
       * @description ID of article introducing this topic. Must be a valid URI, but preferably not a URL. 
       * @example urn:article:1
       */
      contentUri?: string;
      /**
       * Format: uri 
       * @description If specified, set the id to this value. Must start with urn:topic: and be a valid URI. If omitted, an id will be assigned automatically. 
       * @example urn:topic:1
       */
      id?: string;
      /**
       * @description The name of the topic 
       * @example Trigonometry
       */
      name: string;
    };
    TopicFilterIndexDocument: {
      /**
       * Format: uri 
       * @description Filter id 
       * @example urn:filter:234
       */
      filterId: string;
      /**
       * Format: uri 
       * @description Topic to filter connection id 
       * @example urn:topic-filter:12
       */
      id: string;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId: string;
      /**
       * Format: uri 
       * @description Topic id 
       * @example urn:topic:123
       */
      topicId: string;
    };
    TopicResourceIndexDocument: {
      /**
       * Format: uri 
       * @description Topic resource connection id 
       * @example urn:topic-has-resources:123
       */
      id?: string;
      /**
       * @description Primary connection 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which the resource is sorted for the topic 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
      /**
       * Format: uri 
       * @description Resource id 
       * @example urn:resource:345
       */
      resourceId?: string;
      /**
       * Format: uri 
       * @description Topic id 
       * @example urn:topic:345
       */
      topicid?: string;
    };
    TopicResourcePage: {
      /** @description Page containing results */
      results?: (components["schemas"]["TopicResourceIndexDocument"])[];
      /**
       * Format: int64 
       * @description Total number of elements
       */
      totalCount?: number;
    };
    TopicSubtopicIndexDocument: {
      /**
       * Format: uri 
       * @description Connection id 
       * @example urn:topic-has-subtopics:345
       */
      id?: string;
      /**
       * @description Backwards compatibility: Always true. Ignored on insert/update 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which subtopic is sorted for the topic 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
      /**
       * Format: uri 
       * @description Subtopic id 
       * @example urn:topic:234
       */
      subtopicid?: string;
      /**
       * Format: uri 
       * @description Topic id 
       * @example urn:topic:234
       */
      topicid?: string;
    };
    TopicSubtopicPage: {
      /** @description Page containing results */
      results?: (components["schemas"]["TopicSubtopicIndexDocument"])[];
      /**
       * Format: int64 
       * @description Total number of elements
       */
      totalCount?: number;
    };
    TopicTranslationIndexDocument: {
      /**
       * @description ISO 639-1 language code 
       * @example en
       */
      language?: string;
      /**
       * @description The translated name of the topic 
       * @example Trigonometry
       */
      name?: string;
    };
    /** @description All translations of this node */
    TranslationDTO: {
      /**
       * @description ISO 639-1 language code 
       * @example en
       */
      language?: string;
      /**
       * @description The translated name of the node 
       * @example Trigonometry
       */
      name?: string;
    };
    /** @description The new or updated translation */
    UpdateFilterTranslationCommand: {
      /**
       * @description The translated name of the filter 
       * @example Carpenter
       */
      name?: string;
    };
    /** @description The updated connection */
    UpdateNodeChildCommand: {
      /**
       * Format: uri 
       * @description Connection id 
       * @example urn:node-has-child:345
       */
      id?: string;
      /**
       * @description Backwards compatibility: Always true. Ignored on insert/update 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which subtopic is sorted for the topic 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
    };
    /** @description Updated node/resource connection */
    UpdateNodeResourceCommand: {
      /**
       * Format: uri 
       * @description Node resource connection id 
       * @example urn:node-resource:123
       */
      id?: string;
      /**
       * @description Primary connection 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which the resource will be sorted for this node. 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
    };
    /** @description The updated resource filter */
    UpdateResourceFilterCommand: {
      /** Format: uri */
      relevanceId?: string;
    };
    /** @description The new or updated translation */
    UpdateResourceTranslationCommand: {
      /**
       * @description The translated name of the resource 
       * @example Introduction to algebra
       */
      name?: string;
    };
    /** @description The new or updated translation */
    UpdateResourceTypeTranslationCommand: {
      /**
       * @description The translated name of the resource type 
       * @example Article
       */
      name?: string;
    };
    /** @description updated subject/topic connection */
    UpdateSubjectTopicCommand: {
      /**
       * Format: uri 
       * @description connection id 
       * @example urn:subject-topic:2
       */
      id: string;
      /**
       * @description If true, set this subject as the primary subject for this topic. This will replace any other primary subject for this topic. You must have one primary subject, so it is not allowed to set the currently primary subject to not be primary any more. 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which the topic should be sorted for the subject 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
    };
    /** @description The new or updated translation */
    UpdateSubjectTranslationCommand: {
      /**
       * @description The translated name of the subject 
       * @example Mathematics
       */
      name?: string;
    };
    /** @description The updated topic filter */
    UpdateTopicFilterCommand: {
      /** Format: uri */
      relevanceId?: string;
    };
    /** @description Updated topic/resource connection */
    UpdateTopicResourceCommand: {
      /**
       * Format: uri 
       * @description Topic resource connection id 
       * @example urn:topic-has-resources:123
       */
      id?: string;
      /**
       * @description Primary connection 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which the resource will be sorted for this topic. 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
    };
    /** @description The updated connection */
    UpdateTopicSubtopicCommand: {
      /**
       * Format: uri 
       * @description Connection id 
       * @example urn:topic-has-subtopics:345
       */
      id?: string;
      /**
       * @description Backwards compatibility: Always true. Ignored on insert/update 
       * @example true
       */
      primary?: boolean;
      /**
       * Format: int32 
       * @description Order in which subtopic is sorted for the topic 
       * @example 1
       */
      rank?: number;
      /**
       * Format: uri 
       * @description Relevance id 
       * @example urn:relevance:core
       */
      relevanceId?: string;
    };
    /** @description The new or updated translation */
    UpdateTopicTranslationCommand: {
      /**
       * @description The translated name of the topic 
       * @example Trigonometry
       */
      name?: string;
    };
    /** @description The new or updated translation */
    UpdateTranslationCommand: {
      /**
       * @description The translated name of the node 
       * @example Trigonometry
       */
      name?: string;
    };
    UrlMapping: {
      /**
       * @description Node URN for resource in new system 
       * @example urn:topic:1:183926
       */
      nodeId?: string;
      /**
       * @description Subject URN for resource in new system (optional) 
       * @example urn:subject:5
       */
      subjectId?: string;
      /**
       * @description URL for resource in old system 
       * @example ndla.no/nb/node/183926?fag=127013
       */
      url?: string;
    };
    Version: {
      /**
       * Format: date-time 
       * @description Timestamp for when version was archived
       */
      archived?: string;
      /**
       * Format: date-time 
       * @description Timestamp for when version was created
       */
      created?: string;
      /** @description Unique hash for the version */
      hash?: string;
      /**
       * Format: uri 
       * @example urn:version:1
       */
      id?: string;
      /** @description Is the version locked */
      locked?: boolean;
      /** @description Name for the version */
      name?: string;
      /**
       * Format: date-time 
       * @description Timestamp for when version was published
       */
      published?: string;
      /**
       * @example BETA 
       * @enum {string}
       */
      versionType?: "BETA" | "PUBLISHED" | "ARCHIVED";
    };
    /** @description The new version */
    VersionCommand: {
      /**
       * Format: uri 
       * @description If specified, set the id to this value. Must start with urn:subject: and be a valid URI. If ommitted, an id will be assigned automatically. 
       * @example urn:subject:1
       */
      id?: string;
      /** @description If specified, set the locked property to this value. */
      locked?: boolean;
      /**
       * @description If specified, set the name to this value. 
       * @example Beta 2022
       */
      name?: string;
    };
  };
  responses: never;
  parameters: {
    versionHash?: string;
  };
  requestBodies: never;
  headers: {
    /** @description versionHash */
    versionHash: string;
  };
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** Gets all contexts */
  get_22: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["ContextIndexDocument"])[];
        };
      };
    };
  };
  /**
   * Adds a new context 
   * @description All subjects are already contexts and may not be added again. Only topics may be added as a context. The topic must exist already.
   */
  post_17: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateContextCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /**
   * Removes a context 
   * @description Does not remove the underlying resource, only marks it as not being a context
   */
  delete_23: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /**
   * Gets all filters 
   * @deprecated
   */
  index_17: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (Record<string, never>)[];
        };
      };
    };
  };
  /**
   * Creates a new filter 
   * @deprecated
   */
  post_16: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FilterDTO"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /**
   * Gets a single filter 
   * @deprecated 
   * @description Default language will be returned if desired language not found or if parameter is omitted.
   */
  get_20: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /**
   * Updates a filter 
   * @deprecated
   */
  put_19: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FilterDTO"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /**
   * Delete a single filter by ID 
   * @deprecated
   */
  delete_21: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /**
   * Gets all relevanceTranslations for a single filter 
   * @deprecated
   */
  index_18: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["FilterTranslationIndexDocument"])[];
        };
      };
    };
  };
  /**
   * Gets a single translation for a single filter 
   * @deprecated
   */
  get_21: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["FilterTranslationIndexDocument"];
        };
      };
    };
  };
  /**
   * Creates or updates a translation of a filter 
   * @deprecated
   */
  put_20: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateFilterTranslationCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /**
   * Deletes a translation 
   * @deprecated
   */
  delete_22: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Gets all connections between node and children */
  index_16: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["ParentChildIndexDocument"])[];
        };
      };
    };
  };
  /** Adds a node to a parent */
  post_15: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddChildToParentCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /** Gets all connections between node and children paginated */
  allPaginated_8: {
    parameters: {
      query: {
        /** @description The page to fetch */
        page?: number;
        /** @description Size of page to fetch */
        pageSize?: number;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NodeConnectionPage"];
        };
      };
    };
  };
  /** Gets a single connection between a node and a child */
  get_19: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ParentChildIndexDocument"];
        };
      };
    };
  };
  /**
   * Updates a connection between a node and a child 
   * @description Use to update which node is primary to a child or to alter sorting order
   */
  put_18: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateNodeChildCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Removes a connection between a node and a child */
  delete_20: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Gets metadata for entity */
  getMetadata_5: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Metadata"];
        };
      };
    };
  };
  /** Updates metadata for entity */
  putMetadata_5: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Metadata"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Metadata"];
        };
      };
    };
  };
  /** Gets all connections between node and resources */
  index_15: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["NodeResourceDTO"])[];
        };
      };
    };
  };
  /** Adds a resource to a node */
  post_14: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddResourceToNodeCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /** Gets all connections between node and resources paginated */
  allPaginated_7: {
    parameters: {
      query: {
        /** @description The page to fetch */
        page: number;
        /** @description Size of page to fetch */
        pageSize: number;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NodeResourcePageDTO"];
        };
      };
    };
  };
  /** Gets a specific connection between a node and a resource */
  get_18: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NodeResourceDTO"];
        };
      };
    };
  };
  /**
   * Updates a connection between a node and a resource 
   * @description Use to update which node is primary to the resource or to change sorting order.
   */
  put_17: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateNodeResourceCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Removes a resource from a node */
  delete_19: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Gets metadata for entity */
  getMetadata_4: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Metadata"];
        };
      };
    };
  };
  /** Updates metadata for entity */
  putMetadata_4: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Metadata"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Metadata"];
        };
      };
    };
  };
  /** Gets all nodes */
  getAll_3: {
    parameters: {
      query: {
        /** @description Filter by nodeType, could be a comma separated list, defaults to Topics and Subjects (Resources are quite slow). :^) */
        nodeType?: ("NODE" | "SUBJECT" | "TOPIC" | "RESOURCE")[];
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description Filter by contentUri */
        contentURI?: string;
        /** @description Only root level */
        isRoot?: boolean;
        /** @description Filter by key and value */
        key?: string;
        /** @description Filter by key and value */
        value?: string;
        /** @description Filter by visible */
        isVisible?: boolean;
        /** @description Filter by context id */
        contextId?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["NodeDTO"])[];
        };
      };
    };
  };
  /** Creates a new node */
  post_13: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NodeCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /** Gets all nodes paginated */
  allPaginated_6: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description The page to fetch */
        page?: number;
        /** @description Size of page to fetch */
        pageSize?: number;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SearchResult"];
        };
      };
    };
  };
  /** Search all nodes */
  search_3: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description How many results to return per page */
        pageSize?: number;
        /** @description Which page to fetch */
        page?: number;
        /** @description Query to search names */
        query?: string;
        /** @description Ids to fetch for query */
        ids?: (string)[];
        /** @description Filter by nodeType */
        nodeType?: "NODE" | "SUBJECT" | "TOPIC" | "RESOURCE";
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SearchResult"];
        };
      };
    };
  };
  /** Gets a single node */
  get_16: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NodeDTO"];
        };
      };
    };
  };
  /** Updates a single node */
  put_15: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NodeCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Deletes a single node by id */
  delete_17: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Gets all parents and children this node is connected to */
  getAllConnections_1: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["Connections"])[];
        };
      };
    };
  };
  /** Makes all connected resources primary */
  makeResourcesPrimary_1: {
    parameters: {
      query: {
        /** @description If true, children are fetched recursively */
        recursive?: boolean;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": boolean;
        };
      };
    };
  };
  /** Gets metadata for entity */
  getMetadata_3: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Metadata"];
        };
      };
    };
  };
  /** Updates metadata for entity */
  putMetadata_3: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Metadata"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Metadata"];
        };
      };
    };
  };
  /** Gets all children for this node */
  getChildren_1: {
    parameters: {
      query: {
        /** @description Filter by nodeType, could be a comma separated list, defaults to Topics and Subjects (Resources are quite slow). :^) */
        nodeType?: ("NODE" | "SUBJECT" | "TOPIC" | "RESOURCE")[];
        /** @description If true, children are fetched recursively */
        recursive?: boolean;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["NodeChildDTO"])[];
        };
      };
    };
  };
  /** Publishes a node hierarchy to a version */
  publishAsync: {
    parameters: {
      query: {
        /**
         * @description Version id to publish from. Can be omitted to publish from default. 
         * @example urn:version:1
         */
        sourceId?: string;
        /**
         * @description Version id to publish to. 
         * @example urn:version:2
         */
        targetId: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Accepted */
      202: never;
    };
  };
  /** Gets all resources for the given node */
  getResources_2: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description If true, resources from children are fetched recursively */
        recursive?: boolean;
        /** @description Select by resource type id(s). If not specified, resources of all types will be returned. Multiple ids may be separated with comma or the parameter may be repeated for each id. */
        type?: (string)[];
        /** @description Select by relevance. If not specified, all resources will be returned. */
        relevance?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["NodeChildDTO"])[];
        };
      };
    };
  };
  /** Gets all translations for a single node */
  index_14: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["TranslationDTO"])[];
        };
      };
    };
  };
  /** Gets a single translation for a single node */
  get_17: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationDTO"];
        };
      };
    };
  };
  /** Creates or updates a translation of a node */
  put_16: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTranslationCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Deletes a translation */
  delete_18: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Gets a list of contexts matching given pretty url with contextId, empty list if no matches are found. */
  queryByPath: {
    parameters: {
      query: {
        path?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["TaxonomyContextDTO"])[];
        };
      };
    };
  };
  /** Gets a list of resources matching given contentURI, empty list of no matches are found. DEPRECATED: Use /v1/resources?contentURI= instead */
  queryResources: {
    parameters: {
      query: {
        contentURI?: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description Filter by key and value */
        key?: string;
        /** @description Fitler by key and value */
        value?: string;
        /** @description Filter by visible */
        isVisible?: boolean;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["NodeDTO"])[];
        };
      };
    };
  };
  /** Gets a list of topics matching given contentURI, empty list of no matches are found. DEPRECATED: Use /v1/topics?contentURI= instead */
  queryTopics: {
    parameters: {
      query: {
        contentURI: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description Filter by key and value */
        key?: string;
        /** @description Fitler by key and value */
        value?: string;
        /** @description Filter by visible */
        isVisible?: boolean;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["NodeDTO"])[];
        };
      };
    };
  };
  /** Gets a list of contexts matching given contentURI, empty list if no matches are found. */
  queryFullNode: {
    parameters: {
      query: {
        /** @description Whether to filter out contexts if a parent (or the node itself) is non-visible */
        filterVisibles?: boolean;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        contentURI: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["TaxonomyContextDTO"])[];
        };
      };
    };
  };
  /** Gets all relevances */
  index_13: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["RelevanceIndexDocument"])[];
        };
      };
    };
  };
  /** Creates a new relevance */
  post_12: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RelevanceCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /**
   * Gets a single relevance 
   * @description Default language will be returned if desired language not found or if parameter is omitted.
   */
  get_15: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RelevanceIndexDocument"];
        };
      };
    };
  };
  /** Updates a relevance */
  put_14: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RelevanceCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Deletes a single entity by id */
  delete_16: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /**
   * Gets all connections between resources and filters 
   * @deprecated
   */
  index_12: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["ResourceFilterIndexDocument"])[];
        };
      };
    };
  };
  /**
   * Adds a filter to a resource 
   * @deprecated
   */
  post_11: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddFilterToResourceCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /** @deprecated */
  get_14: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        /** @description The id of the connection to get */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ResourceFilterIndexDocument"];
        };
      };
    };
  };
  /**
   * Updates a resource filter connection 
   * @deprecated
   */
  put_13: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateResourceFilterCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /**
   * Deletes a resource filter connection 
   * @deprecated
   */
  delete_15: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        /** @description The id of the connection to delete */
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Gets all connections between resources and resource types */
  index_11: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["ResourceTypeIndexDocument"])[];
        };
      };
    };
  };
  /** Adds a resource type to a resource */
  post_10: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateResourceResourceTypeCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /** Gets a single connection between resource and resource type */
  get_13: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ResourceTypeIndexDocument"];
        };
      };
    };
  };
  /** Removes a resource type from a resource */
  delete_14: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Gets a list of all resource types */
  index_9: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["ResourceTypeIndexDocument"])[];
        };
      };
    };
  };
  /** Adds a new resource type */
  post_9: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResourceTypeCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /** Gets a single resource type */
  get_11: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ResourceTypeIndexDocument"];
        };
      };
    };
  };
  /** Updates a resource type. Use to update which resource type is parent. You can also update the id, take care! */
  put_11: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResourceTypeCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Deletes a single entity by id */
  delete_12: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Gets subtypes of one resource type */
  getSubtypes: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description If true, sub resource types are fetched recursively */
        recursive?: boolean;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["ResourceTypeIndexDocument"])[];
        };
      };
    };
  };
  /** Gets all relevanceTranslations for a single resource type */
  index_10: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["ResourceTypeTranslationIndexDocument"])[];
        };
      };
    };
  };
  /** Gets a single translation for a single resource type */
  get_12: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ResourceTypeTranslationIndexDocument"];
        };
      };
    };
  };
  /** Creates or updates a translation of a resource type */
  put_12: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateResourceTypeTranslationCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Deletes a translation */
  delete_13: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Lists all resources */
  getAll_2: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description Filter by contentUri */
        contentURI?: string;
        /** @description Filter by key and value */
        key?: string;
        /** @description Filter by key and value */
        value?: string;
        /** @description Filter by visible */
        isVisible?: boolean;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["NodeDTO"])[];
        };
      };
    };
  };
  /** Adds a new resource */
  post_8: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResourceCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /** Gets all resources paginated */
  allPaginated_5: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description The page to fetch */
        page?: number;
        /** @description Size of page to fetch */
        pageSize?: number;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SearchResult"];
        };
      };
    };
  };
  /** Search all resources */
  search_2: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description How many results to return per page */
        pageSize?: number;
        /** @description Which page to fetch */
        page?: number;
        /** @description Query to search names */
        query?: string;
        /** @description Ids to fetch for query */
        ids?: (string)[];
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SearchResult"];
        };
      };
    };
  };
  /** Gets a single resource */
  get_9: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NodeDTO"];
        };
      };
    };
  };
  /** Updates a resource */
  put_9: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResourceCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Deletes a single entity by id */
  delete_10: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Clones a resource, including resource-types and translations */
  clone: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        /**
         * @description Id of resource to clone 
         * @example urn:resource:1
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResourceCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /** Gets all parent topics, all filters and resourceTypes for this resource */
  getResourceFull: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ResourceWithParents"];
        };
      };
    };
  };
  /** Gets metadata for entity */
  getMetadata_2: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Metadata"];
        };
      };
    };
  };
  /** Updates metadata for entity */
  putMetadata_2: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Metadata"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Metadata"];
        };
      };
    };
  };
  /** Gets all resource types associated with this resource */
  getResourceTypes_1: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["ResourceTypeWithConnection"])[];
        };
      };
    };
  };
  /** Gets all relevanceTranslations for a single resource */
  index_8: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["ResourceTranslationIndexDocument"])[];
        };
      };
    };
  };
  /** Gets a single translation for a single resource */
  get_10: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ResourceTranslationIndexDocument"];
        };
      };
    };
  };
  /** Creates or updates a translation of a resource */
  put_10: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateResourceTranslationCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Deletes a translation */
  delete_11: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /**
   * Gets all filters associated with this resource 
   * @deprecated
   */
  getFiltersByResourceId: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        resourceId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (Record<string, never>)[];
        };
      };
    };
  };
  /** Gets all connections between subjects and topics */
  index_7: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["SubjectTopicIndexDocument"])[];
        };
      };
    };
  };
  /** Adds a new topic to a subject */
  post_7: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddTopicToSubjectCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /** Gets all connections between subjects and topics paginated */
  allPaginated_4: {
    parameters: {
      query: {
        /** @description The page to fetch */
        page?: number;
        /** @description Size of page to fetch */
        pageSize?: number;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SubjectTopicPage"];
        };
      };
    };
  };
  /** Get a specific connection between a subject and a topic */
  get_8: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SubjectTopicIndexDocument"];
        };
      };
    };
  };
  /**
   * Updates a connection between subject and topic 
   * @description Use to update which subject is primary to a topic or to change sorting order.
   */
  put_8: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSubjectTopicCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Removes a topic from a subject */
  delete_9: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Gets all subjects */
  index_5: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description Filter by key and value */
        key?: string;
        /** @description Fitler by key and value */
        value?: string;
        /** @description Filter by visible */
        isVisible?: boolean;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["NodeDTO"])[];
        };
      };
    };
  };
  /** Creates a new subject */
  post_6: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubjectCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /** Gets all connections between node and children paginated */
  allPaginated_3: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description The page to fetch */
        page?: number;
        /** @description Size of page to fetch */
        pageSize?: number;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SearchResult"];
        };
      };
    };
  };
  /** Search all subjects */
  search_1: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description How many results to return per page */
        pageSize?: number;
        /** @description Which page to fetch */
        page?: number;
        /** @description Query to search names */
        query?: string;
        /** @description Ids to fetch for query */
        ids?: (string)[];
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SearchResult"];
        };
      };
    };
  };
  /**
   * Gets a single subject 
   * @description Default language will be returned if desired language not found or if parameter is omitted.
   */
  get_6: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NodeDTO"];
        };
      };
    };
  };
  /** Updates a subject */
  put_6: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubjectCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Deletes a single entity by id */
  delete_7: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Gets metadata for entity */
  getMetadata_1: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Metadata"];
        };
      };
    };
  };
  /** Updates metadata for entity */
  putMetadata_1: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Metadata"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Metadata"];
        };
      };
    };
  };
  /**
   * Gets all children associated with a subject 
   * @description This resource is read-only. To update the relationship between nodes, use the resource /subject-topics.
   */
  getChildren: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description If true, subtopics are fetched recursively */
        recursive?: boolean;
        /**
         * @deprecated 
         * @description Select by filter id(s). If not specified, all topics will be returned.Multiple ids may be separated with comma or the parameter may be repeated for each id.
         */
        filter?: (string)[];
        /** @description Select by relevance. If not specified, all nodes will be returned. */
        relevance?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["NodeChildDTO"])[];
        };
      };
    };
  };
  /** Gets all relevanceTranslations for a single subject */
  index_6: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["SubjectTranslationIndexDocument"])[];
        };
      };
    };
  };
  /** Gets a single translation for a single subject */
  get_7: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SubjectTranslationIndexDocument"];
        };
      };
    };
  };
  /** Creates or updates a translation of a subject */
  put_7: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSubjectTranslationCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Deletes a translation */
  delete_8: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /**
   * Gets all filters for a subject 
   * @deprecated
   */
  getFiltersBySubjectId: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        subjectId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (Record<string, never>)[];
        };
      };
    };
  };
  /** Gets all resources for a subject. Searches recursively in all children of this node.The ordering of resources will be based on the rank of resources relative to the node they belong to. */
  getResources_1: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description Filter by resource type id(s). If not specified, resources of all types will be returned.Multiple ids may be separated with comma or the parameter may be repeated for each id. */
        type?: (string)[];
        /**
         * @deprecated 
         * @description Select by filter id(s). If not specified, all resources will be returned.Multiple ids may be separated with comma or the parameter may be repeated for each id.
         */
        filter?: (string)[];
        /** @description Select by relevance. If not specified, all resources will be returned. */
        relevance?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        subjectId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["NodeChildDTO"])[];
        };
      };
    };
  };
  /**
   * Gets all connections between topics and filters 
   * @deprecated
   */
  index_4: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["TopicFilterIndexDocument"])[];
        };
      };
    };
  };
  /**
   * Adds a filter to a topic 
   * @deprecated
   */
  post_5: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddFilterToTopicCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /**
   * Updates a topic filter connection 
   * @deprecated
   */
  put_5: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTopicFilterCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /**
   * Deletes a connection between a topic and a filter 
   * @deprecated
   */
  delete_6: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        /** @description The id of the connection to delete */
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Gets all connections between topics and resources */
  index_3: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["TopicResourceIndexDocument"])[];
        };
      };
    };
  };
  /** Adds a resource to a topic */
  post_4: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddResourceToTopicCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /** Gets all connections between topic and resources paginated */
  allPaginated_2: {
    parameters: {
      query: {
        /** @description The page to fetch */
        page: number;
        /** @description Size of page to fetch */
        pageSize: number;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TopicResourcePage"];
        };
      };
    };
  };
  /** Gets a specific connection between a topic and a resource */
  get_5: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TopicResourceIndexDocument"];
        };
      };
    };
  };
  /**
   * Updates a connection between a topic and a resource 
   * @description Use to update which topic is primary to the resource or to change sorting order.
   */
  put_4: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTopicResourceCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Removes a resource from a topic */
  delete_5: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /**
   * Gets all connections between topics and resource types 
   * @deprecated
   */
  index_2: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["ResourceTypeIndexDocument"])[];
        };
      };
    };
  };
  /**
   * Adds a resource type to a topic 
   * @deprecated
   */
  post_3: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTopicResourceTypeCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /**
   * Gets a single connection between topic and resource type 
   * @deprecated
   */
  get_4: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ResourceTypeIndexDocument"];
        };
      };
    };
  };
  /**
   * Removes a resource type from a topic 
   * @deprecated
   */
  delete_4: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Gets all connections between topics and subtopics */
  index_1: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["TopicSubtopicIndexDocument"])[];
        };
      };
    };
  };
  /** Adds a subtopic to a topic */
  post_2: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddSubtopicToTopicCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /** Gets all connections between topics and subtopics paginated */
  allPaginated_1: {
    parameters: {
      query: {
        /** @description The page to fetch */
        page?: number;
        /** @description Size of page to fetch */
        pageSize?: number;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TopicSubtopicPage"];
        };
      };
    };
  };
  /** Gets a single connection between a topic and a subtopic */
  get_3: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TopicSubtopicIndexDocument"];
        };
      };
    };
  };
  /**
   * Updates a connection between a topic and a subtopic 
   * @description Use to update which topic is primary to a subtopic or to alter sorting order
   */
  put_3: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTopicSubtopicCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Removes a connection between a topic and a subtopic */
  delete_3: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Gets all topics */
  getAll_1: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description Filter by contentUri */
        contentURI?: string;
        /** @description Filter by key and value */
        key?: string;
        /** @description Filter by key and value */
        value?: string;
        /** @description Filter by visible */
        isVisible?: boolean;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["NodeDTO"])[];
        };
      };
    };
  };
  /** Creates a new topic */
  post_1: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TopicCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /** Gets all topics paginated */
  allPaginated: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description The page to fetch */
        page?: number;
        /** @description Size of page to fetch */
        pageSize?: number;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SearchResult"];
        };
      };
    };
  };
  /** Search all topics */
  search: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description How many results to return per page */
        pageSize?: number;
        /** @description Which page to fetch */
        page?: number;
        /** @description Query to search names */
        query?: string;
        /** @description Ids to fetch for query */
        ids?: (string)[];
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SearchResult"];
        };
      };
    };
  };
  /** Gets a single topic */
  get_1: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NodeDTO"];
        };
      };
    };
  };
  /** Updates a single topic */
  put_1: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TopicCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** @description Deletes a single entity by id */
  delete_1: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Gets all subjects and subtopics this topic is connected to */
  getAllConnections: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["Connections"])[];
        };
      };
    };
  };
  /**
   * Gets all filters associated with this topic 
   * @deprecated
   */
  getFilters: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (Record<string, never>)[];
        };
      };
    };
  };
  /** Makes all connected resources primary */
  makeResourcesPrimary: {
    parameters: {
      query: {
        /** @description If true, children are fetched recursively */
        recursive?: boolean;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": boolean;
        };
      };
    };
  };
  /** Gets metadata for entity */
  getMetadata: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Metadata"];
        };
      };
    };
  };
  /** Updates metadata for entity */
  putMetadata: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Metadata"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Metadata"];
        };
      };
    };
  };
  /**
   * Gets all resource types associated with this topic. No longer needed since o topics in database have resource-type 
   * @deprecated
   */
  getResourceTypes: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["ResourceType"])[];
        };
      };
    };
  };
  /** Gets all resources for the given topic */
  getResources: {
    parameters: {
      query: {
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
        /** @description If true, resources from subtopics are fetched recursively */
        recursive?: boolean;
        /** @description Select by resource type id(s). If not specified, resources of all types will be returned.Multiple ids may be separated with comma or the parameter may be repeated for each id. */
        type?: (string)[];
        /**
         * @deprecated 
         * @description Select filters by subject id if filter list is empty. Used as alternative to specify filters.
         */
        subject?: string;
        /**
         * @deprecated 
         * @description Select by filter id(s). If not specified, all resources will be returned.Multiple ids may be separated with comma or the parameter may be repeated for each id.
         */
        filter?: (string)[];
        /** @description Select by relevance. If not specified, all resources will be returned. */
        relevance?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["NodeChildDTO"])[];
        };
      };
    };
  };
  /** Gets all subtopics for this topic */
  getSubTopics: {
    parameters: {
      query: {
        /** @description Select filters by subject id if filter list is empty. Used as alternative to specify filters. */
        subject?: string;
        /**
         * @deprecated 
         * @description Select by filter id(s). If not specified, all subtopics connected to this topic will be returned.Multiple ids may be separated with comma or the parameter may be repeated for each id.
         */
        filter?: (string)[];
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["NodeChildDTO"])[];
        };
      };
    };
  };
  /** Gets all relevanceTranslations for a single topic */
  index: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["TopicTranslationIndexDocument"])[];
        };
      };
    };
  };
  /** Gets a single translation for a single topic */
  get_2: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TopicTranslationIndexDocument"];
        };
      };
    };
  };
  /** Creates or updates a translation of a topic */
  put_2: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTopicTranslationCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Deletes a translation */
  delete_2: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
        /**
         * @description ISO-639-1 language code 
         * @example nb
         */
        language: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Returns path for an url or HTTP 404 */
  getTaxonomyPathForUrl: {
    parameters: {
      query: {
        /**
         * @description url in old rig except 'https://' 
         * @example ndla.no/nb/node/142542?fag=52253
         */
        url: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ResolvedOldUrl"];
        };
      };
    };
  };
  /** Inserts or updates a mapping from url to nodeId and optionally subjectId */
  putTaxonomyNodeAndSubjectForOldUrl: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UrlMapping"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  resolve: {
    parameters: {
      query: {
        path: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ResolvedUrl"];
        };
      };
    };
  };
  /** Gets all versions */
  getAll: {
    parameters: {
      query: {
        /**
         * @description Version type 
         * @example PUBLISHED
         */
        type?: "BETA" | "PUBLISHED" | "ARCHIVED";
        /**
         * @description Version hash 
         * @example ndla
         */
        hash?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["Version"])[];
        };
      };
    };
  };
  /** Creates a new version */
  post: {
    parameters: {
      query: {
        /** @description Base new version on version with this id */
        sourceId?: string;
      };
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VersionCommand"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  /** Gets a single version */
  get: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Version"];
        };
      };
    };
  };
  /** Updates a version */
  put: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VersionCommand"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Deletes a version by publicId */
  delete: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
  /** Publishes a version */
  publish: {
    parameters: {
      header: {
        versionHash?: components["parameters"]["versionHash"];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
    };
  };
}
